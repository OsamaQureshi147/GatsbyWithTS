{"version":3,"sources":["webpack://gatsby-starter-default/./src/pages/addRecipe/index.tsx","webpack://gatsby-starter-default/./src/Queries/gqlQueries.js"],"names":["session","username","useState","userName","console","log","name","category","description","instructions","recipe","setRecipe","addRecipe","useMutation","ADD_RECIPE","update","cache","data","getAllRecipes","readQuery","query","GET_ALL_RECIPIES","writeQuery","onCompleted","handleChange","e","target","value","handleSubmit","preventDefault","variables","className","onSubmit","id","type","placeholder","required","onChange","rows","gql","GET_CURRENT_USER"],"mappings":"8NAuHA,UA3GqD,SAAC,GAAwB,EAAvBA,QAAuB,IAAdC,EAAc,EAAdA,SAE9D,GAAgCC,gBAAzBC,EAAP,UAEAC,QAAQC,IAAI,6BAA8BJ,GAG1C,OAA4BC,cAAiB,CAC3CI,KAAM,GACNL,SAAUE,EACVI,SAAU,YACVC,YAAa,GACbC,aAAc,KALTC,EAAP,KAAeC,EAAf,KAQOC,GAAaC,iBAAYC,KAAY,CAC1CC,OAAQ,SAACC,EAAD,GAAoC,IAAlBJ,EAAkB,EAA1BK,KAAQL,UAChBM,EAAuBF,EAAMG,UAAU,CAC7CC,MAAOC,MADDH,cAGRF,EAAMM,WAAW,CACfF,MAAOC,IACPJ,KAAM,CACJC,cAAe,GAAF,eAAMA,GAAN,CAAqBN,QAIxCW,YAAa,WACXZ,EAAU,CACRL,KAAM,GACNC,SAAU,YACVC,YAAa,GACbC,aAAc,GACdR,SAAU,QAlBhB,GAuBMuB,EAAe,SACnBC,GACG,MACHd,EAAU,OAAD,UACJD,IADI,MAENe,EAAEC,OAAOpB,MAAOmB,EAAEC,OAAOC,MAFnB,MAKLC,EAAY,mCAAG,WAAOH,GAAP,wEACnBA,EAAEI,iBACFzB,QAAQC,IAAI,sBAAuBK,GAFhB,SAGbE,EAAU,CACdkB,UAAWpB,IAJM,2CAAH,sDAQlB,OACE,gCACA,uBAAKqB,UAAU,oBACb,wBAAMA,UAAU,cAAcC,SAAUJ,GACtC,sBAAIK,GAAG,SAAP,cACA,yBAAOF,UAAU,SAAjB,SACA,yBACEA,UAAU,QACVG,KAAK,OACLC,YAAY,aACZC,UAAQ,EACR9B,KAAK,OACL+B,SAAUb,IAEZ,yBAAOO,UAAU,SAAjB,aACA,0BACEA,UAAU,QACVzB,KAAK,WACLqB,MAAOjB,EAAOH,SACd8B,SAAUb,GAEV,0BAAQG,MAAM,aAAd,aACA,0BAAQA,MAAM,SAAd,SACA,0BAAQA,MAAM,UAAd,UACA,0BAAQA,MAAM,SAAd,UAEF,yBAAOI,UAAU,SAAjB,gBACA,yBACEA,UAAU,QACVG,KAAK,OACL5B,KAAK,cACL6B,YAAY,oBACZE,SAAUb,EACVY,UAAQ,IAEV,yBAAOL,UAAU,SAAjB,iBACA,4BACEA,UAAU,QACVO,KAAM,EACNH,YAAY,qBACZ7B,KAAK,eACL+B,SAAUb,EACVY,UAAQ,IAIV,0BAAQL,UAAU,iBAAlB,e,oHC9GKV,GAAmBkB,QAAH,eAAtB,mLAeMC,GAAmBD,QAAH,eAAtB","file":"component---src-pages-add-recipe-index-tsx-c8d8d96fd92b74a085e0.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport \"./AddRecipePage.css\";\r\nimport { RouteComponentProps } from \"../../Types/RouteComponentProps\";\r\nimport { ADD_RECIPE } from '../../Queries/gqlMutations';\r\nimport { GET_ALL_RECIPIES } from '../../Queries/gqlQueries'\r\nimport { Recipe } from \"../../Types/Recipe\";\r\n// import useCurrentUser from \"hooks/useCurrentUser\";\r\n// import { ADD_RECIPE, GET_ALL_RECIPES } from \"queries\";\r\n\r\n\r\nconst AppRecipePage: React.FC<RouteComponentProps> = ({session, username}) => {\r\n  \r\n  const [userName, setUserName] = useState<string | undefined>();\r\n\r\n  console.log(\"Session in add recipe page\", username)\r\n\r\n\r\n  const [recipe, setRecipe] = useState<Recipe>({\r\n    name: \"\",\r\n    username: userName,\r\n    category: \"Breakfast\",\r\n    description: \"\",\r\n    instructions: \"\"\r\n  });\r\n\r\n  const [addRecipe] = useMutation(ADD_RECIPE, {\r\n    update: (cache, { data: { addRecipe } }) => {\r\n      const { getAllRecipes }: any = cache.readQuery({\r\n        query: GET_ALL_RECIPIES,\r\n      });\r\n      cache.writeQuery({\r\n        query: GET_ALL_RECIPIES,\r\n        data: {\r\n          getAllRecipes: [...getAllRecipes, addRecipe],\r\n        },\r\n      });\r\n    },\r\n    onCompleted: () => {\r\n      setRecipe({\r\n        name: \"\",\r\n        category: \"breakfast\",\r\n        description: \"\",\r\n        instructions: \"\",\r\n        username: \"\"\r\n      });\r\n    },\r\n  });\r\n\r\n  const handleChange = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setRecipe({\r\n      ...recipe,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    console.log(\"Submitted with data\", recipe)\r\n    await addRecipe({\r\n      variables: recipe,\r\n      // refetchQueries: [{ query: GET_ALL_RECIPES }],\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n    <div className=\"recipe-container\">\r\n      <form className=\"recipe-form\" onSubmit={handleSubmit} >\r\n        <h2 id=\"title\">Add Recipe</h2>\r\n        <label className=\"label\">Name*</label>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Name\"\r\n          required\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n        />\r\n        <label className=\"label\">Category*</label>\r\n        <select\r\n          className=\"input\"\r\n          name=\"category\"\r\n          value={recipe.category}\r\n          onChange={handleChange}\r\n        >\r\n          <option value=\"breakfast\">Breakfast</option>\r\n          <option value=\"lunch\">Lunch</option>\r\n          <option value=\"dinner\">Dinner</option>\r\n          <option value=\"snack\">Snack</option>\r\n        </select>\r\n        <label className=\"label\">Description*</label>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          name=\"description\"\r\n          placeholder=\"Enter Description\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <label className=\"label\">Instructions*</label>\r\n        <textarea\r\n          className=\"input\"\r\n          rows={5}\r\n          placeholder=\"Enter Instructions\"\r\n          name=\"instructions\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n\r\n        {/* {error && <label className=\"error\">{error}</label>} */}\r\n        <button className=\"submit-button\">Submit</button>\r\n      </form>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppRecipePage;\r\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ALL_RECIPIES = gql`\n  query {\n    getAllRecipes {\n      _id\n      name\n      category\n      description\n      instructions\n      createdDate\n      likes\n      username\n    }\n  }\n`\n\nexport const GET_CURRENT_USER = gql`\n  query {\n  getCurrentUser {\n    username\n    email\n    joinDate\n  }\n}\n`;\n"],"sourceRoot":""}