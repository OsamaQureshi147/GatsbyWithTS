{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/WithSession.tsx","webpack://gatsby-starter-default/./src/pages/App.tsx","webpack://gatsby-starter-default/./src/pages/addRecipe/index.tsx","webpack://gatsby-starter-default/./src/pages/login/index.tsx","webpack://gatsby-starter-default/./src/pages/register/index.tsx","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./node_modules/@apollo/client/link/context/index.js","webpack://gatsby-starter-default/./src/pages/index.js"],"names":["Component","session","refetch","Link","to","Router","HomePage","path","username","props","useQuery","GET_CURRENT_USER","onCompleted","data","console","log","onError","networkError","graphQLErrors","map","message","loading","error","useState","userName","name","category","description","instructions","recipe","setRecipe","addRecipe","useMutation","ADD_RECIPE","update","cache","getAllRecipes","readQuery","query","GET_ALL_RECIPIES","writeQuery","handleChange","e","target","value","handleSubmit","preventDefault","variables","className","onSubmit","id","type","placeholder","required","onChange","rows","email","setEmail","password","setPassword","setError","SIGN_IN_USER","signinUser","localStorage","setItem","token","navigate","replace","loginUser","title","currentTarget","style","color","initialState","confirm_password","CREATE_USER","signupUser","setUserInfo","addUser","userInfo","onChangeHandler","Seo","lang","meta","site","useStaticQuery","metaDescription","htmlAttributes","content","property","setter","httpLink","createHttpLink","uri","authLink","headers","authorization","ApolloLink","operation","forward","request","observer","handle","Promise","resolve","then","req","getContext","setContext","subscribe","next","bind","complete","catch","unsubscribe","client","ApolloClient","link","connectToDevTools"],"mappings":"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","file":"component---src-pages-index-js-51e0c0ad528590c346a2.js","sourcesContent":["import React from 'react';\nimport { useQuery } from \"@apollo/client\";\nimport { GET_CURRENT_USER } from \"../Queries/gqlQueries\";\n\nexport const WithSession = Component => props => {\n  const { data, loading, refetch, error } = useQuery(GET_CURRENT_USER, {\n    onCompleted: (data) => {\n      console.log(data);\n    },\n    onError: ({ networkError, graphQLErrors }) => {\n      if (networkError) {\n        console.log(networkError);\n      }\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message }) => console.log(message));\n      }\n    },\n  });\n    if (loading) return null;\n    return(\n        <Component {...props} session={data} refetch={refetch} />\n    );\n}","import React from \"react\"\nimport HomePage from \"./home/HomePage\"\nimport { Router, Link } from \"@reach/router\"\nimport CustomAppBar from '../components/CustomAppBar'\nimport Login from '../pages/login'\nimport Register from '../pages/register'\nimport AddRecipe from '../pages/addRecipe'\nimport { RouteComponentProps } from \"../Types/RouteComponentProps\"\nimport { WithSession } from '../components/WithSession'\n\n\n\nconst App: React.FC<RouteComponentProps> = ({session, refetch}) => {\n  const hello = \"Hello World\"\n  return (\n  <>\n    {/* <CustomAppBar path=\"/\" session={session} refetch={refetch} /> */}\n    <div>\n      <nav>\n        <Link to='/'>Home</Link>\n        <Link to='login'>Login</Link>\n        <Link to='register'>Register</Link>\n        <Link to='xyz'>Add Recipe</Link>\n      </nav>\n    </div>\n    <Router>\n        <HomePage path=\"/\" />\n        <Login path=\"/login\" />\n        <Register path=\"/register\" />\n        <AddRecipe path=\"/xyz\" session={session} username={hello} />\n    </Router>\n  </>\n  \n  )\n}\n\nexport default WithSession(App);\n","import React, { useState, useEffect } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport \"./AddRecipePage.css\";\r\nimport { RouteComponentProps } from \"../../Types/RouteComponentProps\";\r\nimport { ADD_RECIPE } from '../../Queries/gqlMutations';\r\nimport { GET_ALL_RECIPIES } from '../../Queries/gqlQueries'\r\nimport { Recipe } from \"../../Types/Recipe\";\r\n// import useCurrentUser from \"hooks/useCurrentUser\";\r\n// import { ADD_RECIPE, GET_ALL_RECIPES } from \"queries\";\r\n\r\n\r\nconst AppRecipePage: React.FC<RouteComponentProps> = ({session, username}) => {\r\n  \r\n  const [userName, setUserName] = useState<string | undefined>();\r\n\r\n  console.log(\"Session in add recipe page\", username)\r\n\r\n\r\n  const [recipe, setRecipe] = useState<Recipe>({\r\n    name: \"\",\r\n    username: userName,\r\n    category: \"Breakfast\",\r\n    description: \"\",\r\n    instructions: \"\"\r\n  });\r\n\r\n  const [addRecipe] = useMutation(ADD_RECIPE, {\r\n    update: (cache, { data: { addRecipe } }) => {\r\n      const { getAllRecipes }: any = cache.readQuery({\r\n        query: GET_ALL_RECIPIES,\r\n      });\r\n      cache.writeQuery({\r\n        query: GET_ALL_RECIPIES,\r\n        data: {\r\n          getAllRecipes: [...getAllRecipes, addRecipe],\r\n        },\r\n      });\r\n    },\r\n    onCompleted: () => {\r\n      setRecipe({\r\n        name: \"\",\r\n        category: \"breakfast\",\r\n        description: \"\",\r\n        instructions: \"\",\r\n        username: \"\"\r\n      });\r\n    },\r\n  });\r\n\r\n  const handleChange = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setRecipe({\r\n      ...recipe,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    console.log(\"Submitted with data\", recipe)\r\n    await addRecipe({\r\n      variables: recipe,\r\n      // refetchQueries: [{ query: GET_ALL_RECIPES }],\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n    <div className=\"recipe-container\">\r\n      <form className=\"recipe-form\" onSubmit={handleSubmit} >\r\n        <h2 id=\"title\">Add Recipe</h2>\r\n        <label className=\"label\">Name*</label>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Name\"\r\n          required\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n        />\r\n        <label className=\"label\">Category*</label>\r\n        <select\r\n          className=\"input\"\r\n          name=\"category\"\r\n          value={recipe.category}\r\n          onChange={handleChange}\r\n        >\r\n          <option value=\"breakfast\">Breakfast</option>\r\n          <option value=\"lunch\">Lunch</option>\r\n          <option value=\"dinner\">Dinner</option>\r\n          <option value=\"snack\">Snack</option>\r\n        </select>\r\n        <label className=\"label\">Description*</label>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          name=\"description\"\r\n          placeholder=\"Enter Description\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <label className=\"label\">Instructions*</label>\r\n        <textarea\r\n          className=\"input\"\r\n          rows={5}\r\n          placeholder=\"Enter Instructions\"\r\n          name=\"instructions\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n\r\n        {/* {error && <label className=\"error\">{error}</label>} */}\r\n        <button className=\"submit-button\">Submit</button>\r\n      </form>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppRecipePage;\r\n","import React, { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { navigate } from \"gatsby\";\r\n\r\nimport \"./LoginPage.css\"\r\nimport Seo from \"../../components/seo\"\r\nimport { SIGN_IN_USER } from \"../../Queries/gqlMutations\"\r\nimport { RouteComponentProps } from \"../../Types/RouteComponentProps\"\r\n\r\n\r\nconst LoginPage: React.FC<RouteComponentProps> =  () => {\r\n  const [email, setEmail] = useState<string>(\"\")\r\n  const [password, setPassword] = useState<string>(\"\")\r\n  const [error, setError] = useState<string>(\"\")\r\n\r\n  const [loginUser, { loading }] = useMutation(SIGN_IN_USER, {\r\n    onCompleted: async({ signinUser }) => {\r\n      localStorage.setItem(\"token\", signinUser.token)\r\n      navigate(\"/\", {\r\n        replace: true,\r\n      })\r\n      setError(\"\");\r\n    },\r\n    onError: ({ networkError, graphQLErrors }) => {\r\n      if (networkError) {\r\n        console.log(\"Network Error:\", networkError.message)\r\n      }\r\n      if (graphQLErrors) {\r\n        graphQLErrors.map(({ message }) => {\r\n          setError(message)\r\n          console.log(\"gQL Error\", error)\r\n        })\r\n      }\r\n    },\r\n  })\r\n\r\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async e => {\r\n    e.preventDefault()\r\n    await loginUser({\r\n      variables: {\r\n        email,\r\n        password,\r\n      },\r\n    })\r\n    setEmail(\"\")\r\n    setPassword(\"\")\r\n  }\r\n  return (\r\n    <>\r\n      <Seo title=\"Recipe | Login\" />\r\n      <div className=\"container\">\r\n        <div className=\"background-image\" />\r\n        <div className={\"login-container\"}>\r\n          <div className=\"card-container\">\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n              <h3 id=\"title\">Login</h3>\r\n              <label className=\"label\">Email Address*</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                required\r\n                value={email}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setEmail(e.currentTarget.value)\r\n                }\r\n              />\r\n              <label className=\"label\">Password*</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                value={password}\r\n                required\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setPassword(e.currentTarget.value)\r\n                }\r\n              />\r\n              <div className=\"check-box-container\">\r\n                <input className=\"check-box\" type=\"checkbox\" />\r\n                <label>Remember me</label>\r\n              </div>\r\n              <button className=\"submit-button\">Submit</button>\r\n              <label className=\"forgot-password\">\r\n                Forgot <b style={{ color: \"gold\" }}>Password?</b>\r\n              </label>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default LoginPage","import React, { useState, useEffect } from \"react\"\nimport { useMutation } from \"@apollo/client\"\nimport { Link, navigate } from \"gatsby\"\n\n// import { useHistory } from \"react-router-dom\";\n\nimport \"../login/LoginPage.css\"\nimport { CREATE_USER } from \"../../Queries/gqlMutations\"\nimport { RouteComponentProps } from \"../../Types/RouteComponentProps\"\n\n\nconst RegisterPage: React.FC<RouteComponentProps> = () => {\n  const initialState = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirm_password: \"\",\n  }\n  const [addUser, { loading }] = useMutation(CREATE_USER, {\n    onError: ({ networkError, graphQLErrors }) => {\n      if (networkError) {\n        console.log(\"NetworkError:\", networkError.message)\n      }\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message }) => {\n          console.log(message)\n        })\n      }\n    },\n    onCompleted: async ({ signupUser }) => {\n      localStorage.setItem(\"token\", signupUser.token)\n      navigate(\"/\", {\n        replace: true,\n      })\n      setUserInfo(initialState)\n    },\n  })\n  const [userInfo, setUserInfo] = useState(initialState)\n  const { username, email, password, confirm_password } = userInfo\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = e => {\n    const { username, email, password, confirm_password } = userInfo\n    if (password !== confirm_password) {\n      return\n    }\n    e.preventDefault()\n    addUser({\n      variables: {\n        username,\n        email,\n        password,\n      },\n    })\n  }\n  const onChangeHandler: React.ChangeEventHandler<HTMLInputElement> = e => {\n    setUserInfo({ ...userInfo, [e.target.name]: e.target.value })\n  }\n  // const history = useHistory()\n\n  return (\n    <div className=\"container\">\n      <div className=\"background-image\" />\n      <div className={\"login-container\"}>\n        <div className=\"card-container\">\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <h3 id=\"title\">Register</h3>\n            <label className=\"label\">Username</label>\n            <input\n              name=\"username\"\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"Enter Username\"\n              required\n              value={username}\n              onChange={onChangeHandler}\n            />\n\n            <label className=\"label\">Email Address*</label>\n            <input\n              name=\"email\"\n              className=\"input\"\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              required\n              value={email}\n              onChange={onChangeHandler}\n            />\n\n            <label className=\"label\">Password*</label>\n            <input\n              name=\"password\"\n              className=\"input\"\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={password}\n              onChange={onChangeHandler}\n              required\n            />\n\n            <label className=\"label\">Confirm Password*</label>\n            <input\n              name=\"confirm_password\"\n              className=\"input\"\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={confirm_password}\n              onChange={onChangeHandler}\n              required\n            />\n\n            <button className=\"submit-button\">Submit</button>\n            <label className=\"forgot-password\">\n              Already have an account?{\" \"}\n              <b\n                style={{ color: \"gold\" }}\n                // onClick={() => history.push(\"login\")}\n              >\n                <Link to=\"../login\">Sign In</Link>\n              </b>\n            </label>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RegisterPage","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  // const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      // titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n\n    return new Observable(function (observer) {\n      var handle;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}","import * as React from \"react\"\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\"\nimport { setContext } from \"@apollo/client/link/context\"\nimport AppWithSession from './App'\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:4000/graphql\",\n})\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"token\")\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `${token}` : \"\",\n    },\n  }\n})\n\nconst client = new ApolloClient({\n  // uri: \"https://48p1r2roz4.sse.codesandbox.io\",\n  // uri: \"http://localhost:5000/graphql\",\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  // {\n  // typePolicies: {\n  //   User: {\n  //     keyFields: [\"email\"],\n  //   },\n  // },\n  // }\n  connectToDevTools: true,\n})\n\n\nconst IndexPage = () => (\n  <ApolloProvider client={client}>\n    <AppWithSession />\n  </ApolloProvider>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}