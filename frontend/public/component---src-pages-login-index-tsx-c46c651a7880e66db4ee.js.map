{"version":3,"sources":["webpack://gatsby-starter-default/./src/pages/login/index.tsx","webpack://gatsby-starter-default/./src/components/seo.js"],"names":["useState","email","setEmail","password","setPassword","error","setError","useMutation","SIGN_IN_USER","onCompleted","signinUser","localStorage","setItem","token","navigate","replace","onError","networkError","graphQLErrors","console","log","message","map","loginUser","handleSubmit","loading","e","preventDefault","variables","title","className","onSubmit","id","type","placeholder","required","value","onChange","currentTarget","style","color","Seo","description","lang","meta","site","useStaticQuery","metaDescription","htmlAttributes","name","content","property"],"mappings":"8NA+FA,UArFkD,WAChD,IAKa,EALb,GAA0BA,cAAiB,IAApCC,EAAP,KAAcC,EAAd,KACA,GAAgCF,cAAiB,IAA1CG,EAAP,KAAiBC,EAAjB,KACA,GAA0BJ,cAAiB,IAApCK,EAAP,KAAcC,EAAd,KAEA,GAAiCC,iBAAYC,KAAc,CACzDC,aAAW,oBAAE,qFAAQC,EAAR,EAAQA,WACnBC,aAAaC,QAAQ,QAASF,EAAWG,QACzCC,cAAS,IAAK,CACZC,SAAS,IAEXT,EAAS,IALE,2CAAF,6CAOXU,QAAS,YAAqC,IAAlCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cACpBD,GACFE,QAAQC,IAAI,iBAAkBH,EAAaI,SAEzCH,GACFA,EAAcI,KAAI,YAAiB,IAAdD,EAAc,EAAdA,QACnBf,EAASe,GACTF,QAAQC,IAAI,YAAaf,SAf1BkB,EAAP,KAqBMC,GArBN,KAAoBC,QAqBuC,mCAAG,WAAMC,GAAN,wEAC5DA,EAAEC,iBAD0D,SAEtDJ,EAAU,CACdK,UAAW,CACT3B,QACAE,cALwD,OAQ5DD,EAAS,IACTE,EAAY,IATgD,2CAAH,uDAW3D,OACE,gCACE,gBAAC,IAAD,CAAKyB,MAAM,mBACX,uBAAKC,UAAU,aACb,uBAAKA,UAAU,qBACf,uBAAKA,UAAW,mBACd,uBAAKA,UAAU,kBACb,wBAAMA,UAAU,OAAOC,SAAUP,GAC/B,sBAAIQ,GAAG,SAAP,SACA,yBAAOF,UAAU,SAAjB,kBACA,yBACEA,UAAU,QACVG,KAAK,QACLC,YAAY,cACZC,UAAQ,EACRC,MAAOnC,EACPoC,SAAU,SAACX,GAAD,OACRxB,EAASwB,EAAEY,cAAcF,UAG7B,yBAAON,UAAU,SAAjB,aACA,yBACEA,UAAU,QACVG,KAAK,WACLC,YAAY,iBACZE,MAAOjC,EACPgC,UAAQ,EACRE,SAAU,SAACX,GAAD,OACRtB,EAAYsB,EAAEY,cAAcF,UAGhC,uBAAKN,UAAU,uBACb,yBAAOA,UAAU,YAAYG,KAAK,aAClC,6CAEF,0BAAQH,UAAU,iBAAlB,UACA,yBAAOA,UAAU,mBAAjB,UACS,qBAAGS,MAAO,CAAEC,MAAO,SAAnB,qB,oECxEvB,SAASC,EAAI,GAAoC,MAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMf,EAAS,EAATA,MAC9BgB,GAASC,oBAAjB,iBAcMC,EAAkBL,GAAeG,eAfQ,YAkB/C,OACE,qBACEG,eAAgB,CACdL,QAEFd,MAJF,EAMEe,KAAM,CACJ,CACEK,KADF,cAEEC,QAASH,GAEX,CACEI,SADF,WAEED,QAASrB,GAEX,CACEsB,SADF,iBAEED,QAASH,GAEX,CACEI,SADF,UAEED,QAAS,WAEX,CACED,KADF,eAEEC,QAAS,WAEX,CACED,KADF,kBAEEC,SAAS,UAAAL,EAAA,gDAEX,CACEI,KADF,gBAEEC,QAASrB,GAEX,CACEoB,KADF,sBAEEC,QAASH,IA/BP,YAsCZN,eAAmB,CACjBE,KADiB,KAEjBC,KAFiB,GAGjBF,YAAa,IAUf","file":"component---src-pages-login-index-tsx-c46c651a7880e66db4ee.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { navigate } from \"gatsby\";\r\n\r\nimport \"./LoginPage.css\"\r\nimport Seo from \"../../components/seo\"\r\nimport { SIGN_IN_USER } from \"../../Queries/gqlMutations\"\r\nimport { RouteComponentProps } from \"../../Types/RouteComponentProps\"\r\n\r\n\r\nconst LoginPage: React.FC<RouteComponentProps> =  () => {\r\n  const [email, setEmail] = useState<string>(\"\")\r\n  const [password, setPassword] = useState<string>(\"\")\r\n  const [error, setError] = useState<string>(\"\")\r\n\r\n  const [loginUser, { loading }] = useMutation(SIGN_IN_USER, {\r\n    onCompleted: async({ signinUser }) => {\r\n      localStorage.setItem(\"token\", signinUser.token)\r\n      navigate(\"/\", {\r\n        replace: true,\r\n      })\r\n      setError(\"\");\r\n    },\r\n    onError: ({ networkError, graphQLErrors }) => {\r\n      if (networkError) {\r\n        console.log(\"Network Error:\", networkError.message)\r\n      }\r\n      if (graphQLErrors) {\r\n        graphQLErrors.map(({ message }) => {\r\n          setError(message)\r\n          console.log(\"gQL Error\", error)\r\n        })\r\n      }\r\n    },\r\n  })\r\n\r\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async e => {\r\n    e.preventDefault()\r\n    await loginUser({\r\n      variables: {\r\n        email,\r\n        password,\r\n      },\r\n    })\r\n    setEmail(\"\")\r\n    setPassword(\"\")\r\n  }\r\n  return (\r\n    <>\r\n      <Seo title=\"Recipe | Login\" />\r\n      <div className=\"container\">\r\n        <div className=\"background-image\" />\r\n        <div className={\"login-container\"}>\r\n          <div className=\"card-container\">\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n              <h3 id=\"title\">Login</h3>\r\n              <label className=\"label\">Email Address*</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                required\r\n                value={email}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setEmail(e.currentTarget.value)\r\n                }\r\n              />\r\n              <label className=\"label\">Password*</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                value={password}\r\n                required\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setPassword(e.currentTarget.value)\r\n                }\r\n              />\r\n              <div className=\"check-box-container\">\r\n                <input className=\"check-box\" type=\"checkbox\" />\r\n                <label>Remember me</label>\r\n              </div>\r\n              <button className=\"submit-button\">Submit</button>\r\n              <label className=\"forgot-password\">\r\n                Forgot <b style={{ color: \"gold\" }}>Password?</b>\r\n              </label>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default LoginPage","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  // const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      // titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n"],"sourceRoot":""}